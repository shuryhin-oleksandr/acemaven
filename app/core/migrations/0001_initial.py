# Generated by Django 3.1 on 2020-09-04 10:45

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=13, region=None, unique=True, verbose_name='Phone number')),
                ('position', models.CharField(max_length=100, verbose_name='Position In Company')),
                ('photo', models.ImageField(blank=True, help_text='User profile photo.', null=True, upload_to='profile_pics', verbose_name='Profile Photo')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('agent', 'Freight forwarder'), ('client', 'Client')], max_length=100, verbose_name='Company Type')),
                ('name', models.CharField(max_length=100, verbose_name='Company Name')),
                ('address_line_first', models.CharField(max_length=100, null=True, verbose_name='First address line')),
                ('address_line_second', models.CharField(blank=True, max_length=100, null=True, verbose_name='Second address line')),
                ('state', models.CharField(max_length=100, verbose_name='State')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('zip_code', models.CharField(max_length=100, verbose_name='Zip Code')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=13, region=None, unique=True, verbose_name='Phone number')),
                ('tax_id', models.CharField(max_length=18, validators=[django.core.validators.RegexValidator(message='Invalid format. Must be: 00.000.000/0000-00', regex='^\\d{2}\\.\\d{3}\\.\\d{3}\\/\\d{4}-\\d{2}$')], verbose_name='Tax id Number')),
                ('employees_number', models.PositiveIntegerField(default=1, verbose_name='Number of employees in company')),
                ('website', models.CharField(blank=True, max_length=100, null=True, verbose_name='Company website')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company')),
                ('groups', models.ManyToManyField(help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='users', to='auth.Group', verbose_name='groups')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SignUpRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('agent', 'Freight forwarder'), ('client', 'Client')], max_length=100, verbose_name='Company Type')),
                ('name', models.CharField(max_length=100, verbose_name='Company Name')),
                ('address_line_first', models.CharField(max_length=100, null=True, verbose_name='First address line')),
                ('address_line_second', models.CharField(blank=True, max_length=100, null=True, verbose_name='Second address line')),
                ('state', models.CharField(max_length=100, verbose_name='State')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('zip_code', models.CharField(max_length=100, verbose_name='Zip Code')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=13, region=None, unique=True, verbose_name='Phone number')),
                ('tax_id', models.CharField(max_length=18, validators=[django.core.validators.RegexValidator(message='Invalid format. Must be: 00.000.000/0000-00', regex='^\\d{2}\\.\\d{3}\\.\\d{3}\\/\\d{4}-\\d{2}$')], verbose_name='Tax id Number (00.000.000/0000-00)')),
                ('employees_number', models.PositiveIntegerField(default=1, verbose_name='Number of employees in company')),
                ('website', models.CharField(blank=True, max_length=100, null=True, verbose_name='Company website')),
                ('master_email', models.EmailField(max_length=254, verbose_name='Master email address')),
            ],
        ),
        migrations.CreateModel(
            name='SignUpToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=30, verbose_name='Sign Up Token')),
                ('email', models.EmailField(max_length=254, verbose_name='New User Email')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company')),
                ('role', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.role')),
            ],
        ),
        migrations.CreateModel(
            name='BankAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bank_name', models.CharField(max_length=100, verbose_name='Bank Name')),
                ('branch', models.CharField(max_length=6, validators=[django.core.validators.RegexValidator(message='Invalid format. Must be: 0000-0', regex='^\\d{4}-\\d{1}$')], verbose_name='Branch Number (0000-0)')),
                ('number', models.IntegerField(verbose_name='Account Number')),
                ('account_type', models.CharField(choices=[('savings', 'Savings'), ('checking', 'Checking')], max_length=10, verbose_name='Account Type')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bank_accounts', to='core.company')),
            ],
            options={
                'verbose_name': 'Bank Account',
                'verbose_name_plural': 'Bank Accounts',
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='companies',
            field=models.ManyToManyField(related_name='users', through='core.Role', to='core.Company'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
